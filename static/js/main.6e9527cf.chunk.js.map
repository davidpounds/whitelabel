{"version":3,"sources":["actions/index.js","utils/index.js","store/index.js","selectors/index.js","components/cssvalues/ColourValue.jsx","components/cssvalues/ImageValue.jsx","components/cssvalues/TextValue.jsx","components/CssValue.jsx","components/CssCustomProperty.jsx","components/Section.jsx","components/WhiteLabelAdmin.jsx","App.jsx","index.js"],"names":["ACTION","Object","freeze","LOAD_STORE","UPDATE_VALUE","CSS_VALUE_TYPE","COLOUR","LENGTH","PERCENTAGE","MULTIPLIER","IMAGE","THEME","LIGHT","DARK","GLOBAL","isThemed","cssValue","constructor","String","keys","every","k","includes","getThemedValues","entries","sort","a","b","initialState","createStore","state","action","type","data","property","theme","value","itemToUpdate","cssCustomProperties","find","item","itemIndex","findIndex","itemsBefore","slice","itemsAfter","length","updatedItem","window","__REDUX_DEVTOOLS_EXTENSION__","getWhiteLabelName","name","getWhiteLabelSections","sections","getWhiteLabelCssCustomProperties","getWhiteLabelComputedCss","mappedCssProperties","reduce","mappedCss","cssCustomProperty","themedValues","forEach","push","substr","wrapCssValue","join","ColourValue","props","id","updateHandler","includeColours","useSelector","getCssValueDetails","cssPropertyName","ccp","getCssValue","showIncludeColours","Array","isArray","useIncludedColour","useState","customColourValue","setCustomColourValue","useEffect","showCustomColour","map","col","optName","propertyName","className","checked","onChange","htmlFor","style","backgroundColor","size","disabled","ImageValue","asyncLoadFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","e","target","result","readAsDataURL","imageChangeHandler","files","url","previewStyles","backgroundImage","TextValue","CssValue","text","themed","dispatch","useDispatch","labelText","valueProps","updateValue","control","toUpperCase","CssCustomProperty","values","Section","sectionId","section","filter","p","sectionName","WhiteLabelAdmin","App","whiteLabelData","styles","document","getElementById","innerHTML","ReactDOM","render","StrictMode","store"],"mappings":"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","file":"static/js/main.6e9527cf.chunk.js","sourcesContent":["export const ACTION = Object.freeze({\n    LOAD_STORE: 'LOAD_STORE',\n    UPDATE_VALUE: 'UPDATE_VALUE',\n});\n\nexport const loadStore = data => ({\n    type: ACTION.LOAD_STORE,\n    data,\n});\n\nexport const updateValue = (theme, property, value) => ({\n    type: ACTION.UPDATE_VALUE,\n    data: {\n        theme,\n        property,\n        value,\n    },\n});\n","export const CSS_VALUE_TYPE = Object.freeze({\n    COLOUR: 'colour',\n    LENGTH: 'length',\n    PERCENTAGE: 'percentage',\n    MULTIPLIER: 'multiplier',\n    IMAGE: 'image',\n});\n\nexport const THEME = Object.freeze({\n    LIGHT: 'light',\n    DARK: 'dark',\n    GLOBAL: 'global',\n});\n\nexport const makeUpperCaseFirstLetter = text => String(text).substr(0, 1).toUpperCase() + String(text).substr(1);\n\nexport const isThemed = cssValue => cssValue?.constructor !== String && Object.keys(cssValue).every(k => [THEME.LIGHT, THEME.DARK].includes(k));\n\nexport const getThemedValues = cssValue => isThemed(cssValue) ? \n    Object.entries(cssValue).sort((a, b) => a.cssValue > b.cssValue ? 1 : -1) : \n    [[THEME.GLOBAL, cssValue]];\n","import { createStore } from 'redux';\nimport { ACTION } from '../actions';\nimport { THEME } from '../utils';\n\nconst initialState = {};\n\nconst reducer = (state = initialState, action = null) => {\n    const { type, data } = action;\n    switch (type) {\n        case ACTION.LOAD_STORE:\n            return {\n                ...data,\n            };\n        case ACTION.UPDATE_VALUE:\n            const { property, theme, value } = data;\n            const itemToUpdate = state?.cssCustomProperties?.find?.(item => item.property === property) ?? null;\n            if (!itemToUpdate) return state;\n            const itemIndex = state.cssCustomProperties.findIndex(item => item === itemToUpdate);\n            const itemsBefore = state.cssCustomProperties.slice(0, itemIndex);\n            const itemsAfter = state.cssCustomProperties.slice(itemIndex + 1, state.cssCustomProperties.length);\n            const updatedItem = {\n                ...itemToUpdate,\n                ...(theme === THEME.GLOBAL) && { value },\n                ...(theme !== THEME.GLOBAL) && {\n                    value: {\n                        ...itemToUpdate.value,\n                        [theme]: value,\n                    }\n                }\n            };\n            return {\n                ...state,\n                cssCustomProperties: [\n                    ...itemsBefore,\n                    updatedItem,\n                    ...itemsAfter,\n                ]\n            };\n        default:\n            return state;\n    }\n};\n\nexport default createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n","import { getThemedValues, THEME } from '../utils';\n\nexport const getWhiteLabelName = state => state?.name ?? null;\nexport const getWhiteLabelSections = state => state?.sections ?? [];\nexport const getWhiteLabelCssCustomProperties = state => state?.cssCustomProperties ?? [];\nexport const getWhiteLabelCssCustomPropertiesForSection = sectionId => state => getWhiteLabelCssCustomProperties(state).filter(p => p.sectionId === sectionId);\nexport const getWhiteLabelCssCustomProperty = property => state => getWhiteLabelCssCustomProperties(state)?.find?.(p => p.property === property) ?? null;\n\nexport const getWhiteLabelComputedCss = state => {\n    const cssCustomProperties = getWhiteLabelCssCustomProperties(state);\n    const mappedCssProperties = cssCustomProperties.reduce((mappedCss, cssCustomProperty) => {\n        const {property, value} = cssCustomProperty;\n        const themedValues = getThemedValues(value);\n        const wrapCssValue = cssValue => cssValue.substr(0, 2) === '--' ? `var(${cssValue})` : cssValue;\n        themedValues.forEach(([theme, cssValue]) => {\n            if (cssValue === null) return;\n            mappedCss[theme].push(`${property}: ${wrapCssValue(cssValue)};`);\n        });\n        return mappedCss;\n    }, {[THEME.GLOBAL]: [], [THEME.LIGHT]: [], [THEME.DARK]: []});\n    return `:root { ${mappedCssProperties[THEME.GLOBAL].join(' ')} } :root .${THEME.LIGHT} { ${mappedCssProperties[THEME.LIGHT].join(' ')} } :root .${THEME.DARK} { ${mappedCssProperties[THEME.DARK].join(' ')} }`;\n};\n","import './ColourValue.css';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getWhiteLabelCssCustomProperties } from '../../selectors';\n\nconst ColourValue = props => {\n    const { id, theme, cssValue, updateHandler, property, includeColours = [] } = props;\n    const cssCustomProperties = useSelector(getWhiteLabelCssCustomProperties);\n    \n    const getCssValueDetails = cssPropertyName => cssCustomProperties.find(ccp => ccp.property === cssPropertyName) ?? null;\n    const getCssValue = cssPropertyName => getCssValueDetails(cssPropertyName)?.value?.[theme] ?? null;\n    const showIncludeColours = Array.isArray(includeColours) && includeColours.length > 0;\n    const useIncludedColour = showIncludeColours && includeColours.includes(cssValue); \n    const [customColourValue, setCustomColourValue] = useState(useIncludedColour ? getCssValue(cssValue) ?? '' : cssValue ?? '');\n\n    useEffect(() => {\n        setCustomColourValue(useIncludedColour ? getCssValue(cssValue) ?? '' : cssValue ?? '');\n        // eslint-disable-next-line\n    }, [useIncludedColour, cssValue, theme]);\n\n    const showCustomColour = !showIncludeColours || !useIncludedColour;\n\n    return (\n        <>\n            {showIncludeColours && includeColours.map(col => {\n                const optName = getCssValueDetails(col)?.propertyName ?? col;\n                return (\n                    <div key={col} className=\"css-value-colour\">\n                        <input \n                            className=\"css-value-colour-radio\"\n                            type=\"radio\" \n                            id={`radio${id}-${col}`}\n                            name={`col-${id}`} \n                            value={col} \n                            checked={col === cssValue} \n                            onChange={updateHandler} \n                        />\n                        <label htmlFor={`radio${id}-${col}`} className=\"css-value-colour-label\">{optName}</label>\n                        <span className=\"css-value-colour-swatch\" style={{backgroundColor: `var(${col})`}}></span>\n                    </div>\n                );\n            })}\n\n            <div className=\"css-value-colour\">\n                {showIncludeColours && (\n                    <>\n                        <input \n                            className=\"css-value-colour-radio\"\n                            type=\"radio\" \n                            id={`radio${id}-custom`}\n                            name={`col-${id}`} \n                            value={customColourValue} \n                            checked={!useIncludedColour} \n                            onChange={updateHandler} \n                        />\n                        <label htmlFor={`radio${id}-custom`} className=\"css-value-colour-label\">Custom</label>\n                    </>\n                )}\n                {showCustomColour && (\n                    <>\n                        <input \n                            id={id}\n                            className=\"css-value-input\"\n                            type=\"text\" \n                            data-theme={theme}\n                            value={customColourValue}\n                            onChange={updateHandler}\n                            size={9}\n                            disabled={useIncludedColour}\n                        />\n                        <span className=\"css-value-colour-swatch\" style={{backgroundColor: `var(${property})`}}></span>\n                    </> \n                )}\n            </div>                \n        </>\n    );\n};\n\nexport default ColourValue;\n","import './ImageValue.css';\n\nconst ImageValue = props => {\n    const { id, theme, cssValue, updateHandler } = props;\n\n    const asyncLoadFile = file => new Promise((resolve, reject) => {\n        if (!file) reject('File not provided');\n        const reader = new FileReader();\n        reader.addEventListener('load', e => resolve(e?.target?.result ?? null), false);\n        reader.addEventListener('error', reject, false);\n        reader.readAsDataURL(file);\n    });\n    \n    const imageChangeHandler = async e => {\n        const file = e?.target?.files?.[0] ?? null;\n        if (!file) return;\n        const url = await asyncLoadFile(file);\n        updateHandler({ target: { value: url }});\n    };\n\n    const previewStyles = {\n        backgroundImage: `url(\"${cssValue}\")`,\n        backgroundColor: cssValue ? 'var(--page-header-colour)' : 'transparent',\n    };\n    \n    return (\n        <div className=\"css-value-image\">\n            <label htmlFor={id} className=\"css-value-image-label\">Browse</label>\n            <input \n                id={id}\n                className=\"css-value-input css-value-image-input\"\n                type=\"file\" \n                data-theme={theme}\n                onChange={imageChangeHandler}\n            />\n            <span \n                className={`css-value-image-preview ${cssValue ? '' : 'blank'}`} \n                style={previewStyles}\n                data-blank-message=\"Choose an image file\"\n            ></span>\n        </div>\n    );\n};\n\nexport default ImageValue;\n","import './TextValue.css';\n\nconst TextValue = props => {\n    const { id, theme, cssValue, updateHandler } = props;\n\n    return (\n        <input \n            id={id}\n            className=\"css-value-input\"\n            type=\"text\" \n            data-theme={theme}\n            value={cssValue ?? ''}\n            onChange={updateHandler}\n        />\n    );\n};\n\nexport default TextValue;\n","import './CssValue.css';\nimport { useDispatch } from 'react-redux';\nimport { updateValue } from '../actions';\nimport { CSS_VALUE_TYPE, THEME, makeUpperCaseFirstLetter } from '../utils';\nimport ColourValue from './cssvalues/ColourValue';\nimport ImageValue from './cssvalues/ImageValue';\nimport TextValue from './cssvalues/TextValue';\n\nconst CssValue = props => {\n    const { \n        theme,\n        themed,\n        cssValue, \n        type,\n        property,\n        includeColours = [],\n    } = props;\n    const dispatch = useDispatch();\n    const id = `id${property}-${theme}`;\n    const labelText = themed ? \n        `${theme} theme` : \n        `${THEME.LIGHT} and ${THEME.DARK} themes`;\n    const updateHandler = e => dispatch(updateValue(theme, property, e.target.value));\n    \n    const valueProps = {\n        id,\n        theme,\n        cssValue,\n        property,\n        updateHandler,\n    };\n\n    let control = null;\n    switch (type) {\n        case CSS_VALUE_TYPE.COLOUR:\n            control = <ColourValue {...valueProps} includeColours={includeColours} />;\n            break;\n        case CSS_VALUE_TYPE.IMAGE:\n            control = <ImageValue {...valueProps} />;\n            break;\n        default:\n            control = <TextValue {...valueProps} />;\n    }\n\n    return (\n        <div className={`css-value ${theme} ${themed ? '' : 'not-themed'}`}>\n            <label htmlFor={id} className=\"css-value-label\">{makeUpperCaseFirstLetter(labelText)}</label>\n            {control}\n        </div>\n    );\n};\n\nexport default CssValue;\n","import './CssCustomProperty.css';\nimport CssValue from './CssValue';\nimport { isThemed, getThemedValues } from '../utils';\n\nconst CssCustomProperty = props => {\n    const { cssCustomProperty } = props;\n    const {\n        type,\n        propertyName,\n        property,\n        includeColours = [],\n        value,\n    } = cssCustomProperty;\n\n    const themed = isThemed(value);\n    const values = getThemedValues(value);\n\n    return (\n        <fieldset className=\"css-custom-property\">\n            <legend className=\"css-custom-property-heading\">\n                {propertyName}\n                <span className=\"css-custom-property-var\">{property}</span>\n            </legend>\n            {values.map(([theme, cssValue]) => (\n                <CssValue\n                    key={theme}\n                    type={type}\n                    property={property}\n                    theme={theme} \n                    themed={themed} \n                    includeColours={includeColours}\n                    cssValue={cssValue} \n                />\n            ))}\n        </fieldset>\n    );\n};\n\nexport default CssCustomProperty;\n","import './Section.css';\nimport { useSelector } from 'react-redux';\nimport { getWhiteLabelCssCustomPropertiesForSection } from '../selectors';\nimport CssCustomProperty from './CssCustomProperty';\n\nconst Section = props => {\n    const { section } = props;\n    const cssCustomProperties = useSelector(getWhiteLabelCssCustomPropertiesForSection(section.sectionId));\n\n    return (\n        <section className=\"section\">\n            <h2 className=\"section-heading\">{section.sectionName}</h2>\n            {cssCustomProperties.map(cssCustomProperty => (\n                <CssCustomProperty \n                    key={cssCustomProperty.property} \n                    cssCustomProperty={cssCustomProperty} \n                />\n            ))}\n        </section>\n    );\n};\n\nexport default Section;\n","import './WhiteLabelAdmin.css';\nimport { useSelector } from 'react-redux';\nimport { getWhiteLabelName, getWhiteLabelSections } from '../selectors';\nimport Section from './Section';\n\nconst WhiteLabelAdmin = props => {\n    const name = useSelector(getWhiteLabelName);\n    const sections = useSelector(getWhiteLabelSections);\n\n    return (\n        <div className=\"whitelabel-admin\">\n            <h1 className=\"whitelabel-admin-heading\">{name}</h1>\n            {sections.map(section => <Section key={section.sectionId} section={section} />)}\n        </div>\n    );\n};\n\nexport default WhiteLabelAdmin;\n","import './App.css';\nimport whiteLabelData from './data/whiteLabelData.json';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadStore } from './actions';\nimport { getWhiteLabelComputedCss } from './selectors';\nimport WhiteLabelAdmin from './components/WhiteLabelAdmin';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadStore(whiteLabelData));\n  }, [dispatch]);\n\n  const style = useSelector(getWhiteLabelComputedCss);\n  useEffect(() => {\n    const styles = document.getElementById('previewstyles');\n    if (styles) {\n      styles.innerHTML = style;\n    }\n  }, [style]);\n\n  return (\n    <div className=\"app\">\n      <WhiteLabelAdmin />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}